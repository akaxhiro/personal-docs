From takahiro.akashi@linaro.org Mon Jul  4 10:27:16 2022
Date: Mon, 4 Jul 2022 10:27:13 +0900
From: AKASHI Takahiro <takahiro.akashi@linaro.org>
To: private-kwg@linaro.org, alex.bennee@linaro.org
Subject: [Weekly] Week ending 2022-07-01
Message-ID: <20220704012713.GB6321@laputa>

The heatwave hits Tokyo last week.

Stratos
=======
[STR-68] (network latency behaviour with VMs)
* latest result of latency measurement
  (No update)

  a.user (+ nat): failed
  b.tap + bridge: OK
  c.macvtap: OK
  d.NIC passthrough: suspended/cancelled
  e.OpenVSwitch (as a simple bridge): OK
  f.eBPF-based bridge: OK

  (netperf)
  $ netperf -H 192.168.20.1  -l -1000 -t TCP_RR -w 10ms -b 1 -v 2 -- \
      -O min_latency,mean_latency,max_latency,stddev_latency,transaction_rate

                         min    avg    max    stddev
  host2-to-host1         180    203    408    8.5
  vm-to-host1
    tap                  214    254    581    14.2
    macvtap              217    244    567    13.0
    ovs                  266    291    671    13.3
    eBPF (XDP)           221    254    571    13.4

* TODO: Ilias raised a concern about the result of eBPF case, saying
  that the latency should be much smaller than other cases.

[STR-92] (Setup for TSN)
* I moved to host-to-vm environment, and tried to measure latencies, but
  suddenly I noticed that virtio-net does NOT support PTP (trivial?).
  Actually, there is already an alternative, ptp_kvm module, which provides
  a PTP source clock, /dev/ptp(0), under kvm.

  (This also implies there is no counterpart for Xen or other hypervisors.)

  It seems that this module was initially developed not for industrial
  but for cloud environment. Interesting.

* The result from my own benchmark program has some odd numbers.
  I'm looking into it.

* Another big concern is whether TSN (not PTP) feature can be utilized
  in VM environment, or should we simply pass on an physical device to VM?

  On sender side, a maximum latency is, in most cases, guaranteed with kernel's
  taprio (time-aware scheduler) combined with TSN's ETF (Earliest Transmit-time
  First). Obviously this won't be available under virtio-net since
  VM guest can access the hardware directly (ETF is implemented as hardware offload).

  On receiver side, there is no direct benefit using TSN, except frame
  preemption and frame replication which is handled by hardware anyway.
  The only setup may be to map VLAN's PCP to socket's priority.
  (I'm not sure this will keep the latency minimum because the kernel's bridge
  or other means doesn't guarantee it.)

[STR-76] Break down the latency
* TODO: look into the issue I reported last week; the benchmark program on i225 is
yet a bit unstable as I sometimes see that read/readmsg() after select() fails.

* No update on the report[1].

  [1] https://docs.google.com/presentation/d/1jQUK2p5cUQsZAqVwZ9iz4CpJPSoPiAloR64MojQpy6Y/edit?usp=sharing

[STR-41] (Implement SVC/HV passthrough for Xen on ARM64)
* No progress

[STR-66]
  No progress

[STR-70] (Check the status of eBPF for ARM64)
* No progress

U-Boot support
==============
[TS-219]
* The follow-up patch[2]
  No progress. The patch for testing is yet to be merged.

(MISC)
* U-Boot UEFI secure boot issue
  I have already submitted the patch to Ilias and Heinrich and
  got some comments.
  I'm still waiting for Heinrich's reply about if he wants me to
  send the current patch to the mailing list.

  (Tom, the U-Boot maintainer, and Heinrich seem to expect
  that the patch be merged in v2022.07 release.)

* Device path creation improvement for USB device[3]
  No progress

[2] https://lists.denx.de/pipermail/u-boot/2022-May/483962.html
[3] https://lists.denx.de/pipermail/u-boot/2021-November/468216.html

=== Patch status ===
    uboot/short_path v2: partially merged in v2022.07-rc4
    uboot/uefi removable rfc: merged in v2022.07-rc2
    uboot/disk_integ v5: merged in v2022.07-rc1

=== Issues ===
* I still need a PCIE (intel x550 or 82576) card for SR-IOV testing.

=== Travel&Holiday&Event ===
?: summer holidays


From: AKASHI Takahiro <takahiro.akashi@linaro.org>
To: private-kwg@linaro.org
Cc: alex.bennee@linaro.org
Bcc: takahiro.akashi@linaro.org
Subject: [Weekly] Week ending 2021-05-21
Reply-To: 

[STR-21] or rather [STR-7]?
- Plan for virtio proxy
  After some thoughts about how I would best implement the virtio
  proxy, I decided to take a couple of steps:
  step 1: current PoC
  step pre-2: thread model with local rpc's
  step 2: thread model
  step 3: vm model
  step 4: vm model with permissive license code

  In step 1, the virtio backend vm is a baremetal Zephyr application,
  and consists of two threads,
    control thread: pokes xenstore and spawns the backend thread,
    backend thread: catches MMIO's at virtio configuration space,
        sets up virtqueues and serves for virtio-blk requests.
  It runs on a single vm.

  In step 2, the backend thread will be split into two threads,
    virtio proxy thread: catches MMIO's and forwards them
        to the server via *RPC*,
    virtio server thread: sets up virtqueues and serves for virtio-blk
        requests with hypervisor calls via *RPC*

    (NOTE: this would implement (c)-(b) model in my draft proposal.)

   There are bi-directional RPC's between the two threads:
     proxy -> server: MMIO requests
     server -> proxy: VM operations

   The difference between step pre-2 and step-2 is that we will
   implement *real* RPC mechanism over Zephyr's queue interfaces
   in step 2, while RPC invocation will be replaced with a *local*
   function call. I hope that step pre-2 will help reduce
   bunch of efforts in debugging/verifying the protocols.
   
   Yet this Zephyr application runs in a single vm.

   In step 3, I will re-implement RPC mechanism over virtqueuues
   which will be set up as part of "virtio proxy" device.
   Virtio server thread will be transformed into a bearemetal
   Zephyr application runs in a standalone vm, while virtio proxy
   thread will also be transformed into another application and
   runs in another vm.

   (Probably the control thread would reside within the proxy vm
   at this stage.)

   In step 4, I will re-write the code under permissive license
   so that all the libraries can be linked without any infringement.
   This will be beyond PoC efforts, though.

- Started step (pre-)2.
  It will take one week to implement RPC mechanism over Zephyr's
  queue interface and another week to implement proxy/server threads.

(MISC)
- U-Boot capsule update support
* Add signing feature to mkeficapsule[1]
  no progress as I focused on virtio work this week.

[1] https://lists.denx.de/pipermail/u-boot/2021-May/449571.html

=== Patch status ===
    uboot/cap auth v1: submitted on 05/12
    uboot/cap misc: submitted on 05/11
    kernel/uhs2  v3.1: submitted on 11/06
    uboot/sbsa    rfc: submitted on 11/04
    uboot/xen-earlyuart v1: submitted on 10/15

=== Issues ===
None

=== Travel&Holiday&Event ===
July 22: Sea Day
July 23: Sports Day (Olympic Opening Ceremony)
Aug 11: Mountain Day (Olympic Closing Ceremony) 
